<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Forest Ecosystem Modeling</title>
      <link href="/2020/02/26/Forest-Ecosystem-Modeling/"/>
      <url>/2020/02/26/Forest-Ecosystem-Modeling/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>This Blog aims to simply step-by step replicate (not so strict) the basic results of the paper titled as <em>Developing an empirical model of stand GPP with the LUE model approach: analysis of eddy covriance data at five constrasting conifer sites in Europe</em> <span class="math inline">\(^{[1]}\)</span>. Mäkelä's paper developed a statistical model for daily gross primary production (GPP) in boreal and temperate coniferous forests based on <strong>Light Use Efficiency (LUE)</strong>. So we plan to apply weather dataset to simulate daily Gross Primary Production (GPP) by using Python.</p><p>To make the model easily to understand, we just using the fixed parameters supported by authors in the paper. And the fixed parameters list as follow:</p><table><thead><tr class="header"><th style="text-align: left;">Parameter</th><th style="text-align: left;">Meaning</th><th style="text-align: left;">Unit</th><th style="text-align: left;">Value</th></tr></thead><tbody></tbody></table>| <span class="math inline">\(\beta\)</span> | Potential daily LUE |<div style="width: 100pt"><span class="math inline">\(g \cdot C \cdot m^{-2}\)</span></div><div class="line-block">0.513 | | <span class="math inline">\(\gamma\)</span> | Empirical parameter |<span class="math inline">\(m^{2}\cdot mol^{-1}\)</span>| 0.0196 | | <span class="math inline">\(\kappa\)</span> | Empirical parameter |<span class="math inline">\(kPa^{-1}\)</span>| -0.389 | | $$ | Time constant of delay process |<span class="math inline">\(days\)</span>| 7.2 | | <span class="math inline">\(X_{0}\)</span> | Shreshold value of the delayed temperature |$ ^{}C$| -4 | | <span class="math inline">\(S_{max}\)</span> | Empirical parameter |$ ^{}C$| 17.3 |</div><p>And the main model is: <span class="math display">\[P_{k} = \beta \Phi_{k}\prod_i f_{ik}+\varepsilon_{k} \tag1\]</span></p><p>Where:</p><p><span class="math inline">\(P_{k}\)</span> is GPP (<span class="math inline">\(gC\cdot m^{2}\cdot day^{-1}\)</span>).</p><p><span class="math inline">\(\prod_{i} f_{ik}\)</span> for me, means product of the 4 different modifying factors. <span class="math inline">\(\varepsilon_{k}\)</span> here, i assumed that, follows the normal distribution. <span class="math inline">\(\Theta\)</span> is APAR with unit <span class="math inline">\(mol \cdot m^{-2}\)</span>.</p><p>The model is based on <strong>Daily data</strong>, so before we input all variables into model, make sure the time span! Besides, due to input variables include <strong>VPD</strong> and <strong>PAR</strong>, however the weather dataset struct (shows as below:)</p><p><img src="/images/WEATHER_DATA.png"></p><p>has no such variables, so we have to convert <strong>air pressur</strong> and <strong>air temperature</strong> to <strong>VPD</strong> and <strong>PAR</strong>, respectively. Here we star:</p><h4 id="define-the-constant">1 Define the constant</h4><div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb1-1" data-line-number="1"></a><a class="sourceLine" id="cb1-2" data-line-number="2">Beta <span class="op">=</span> <span class="fl">0.513</span>  <span class="co"># Potential daily LUE</span></a><a class="sourceLine" id="cb1-3" data-line-number="3">Gamma <span class="op">=</span> <span class="fl">0.0196</span>  <span class="co"># Empirical parameter</span></a><a class="sourceLine" id="cb1-4" data-line-number="4">Kappa <span class="op">=</span> <span class="fl">-0.389</span>  <span class="co"># Empirical parameter</span></a><a class="sourceLine" id="cb1-5" data-line-number="5">Tau <span class="op">=</span> <span class="fl">7.2</span>  <span class="co"># Time constant of delay process</span></a><a class="sourceLine" id="cb1-6" data-line-number="6">Xo <span class="op">=</span> <span class="dv">-4</span>  <span class="co"># Shreshold value of the delayed temperature</span></a><a class="sourceLine" id="cb1-7" data-line-number="7">Smax <span class="op">=</span> <span class="fl">17.3</span>  <span class="co"># Empirical parameter</span></a><a class="sourceLine" id="cb1-8" data-line-number="8">k <span class="op">=</span> <span class="fl">-0.389</span>  <span class="co"># Empirical parameter</span></a></code></pre></div><h4 id="calculation-for-modifying-factors">2 Calculation for modifying factors</h4><h5 id="light-modifier-f_l">2.1 Light modifier <span class="math inline">\(f_{L}\)</span></h5><div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb2-1" data-line-number="1"></a><a class="sourceLine" id="cb2-2" data-line-number="2"><span class="kw">def</span> Light_modifer(Phi):</a><a class="sourceLine" id="cb2-3" data-line-number="3">    <span class="co">"""</span></a><a class="sourceLine" id="cb2-4" data-line-number="4"><span class="co">    daily light modifer</span></a><a class="sourceLine" id="cb2-5" data-line-number="5"><span class="co">        Input:</span></a><a class="sourceLine" id="cb2-6" data-line-number="6"><span class="co">            Phi is daily APAR with unit of mol m^-2</span></a><a class="sourceLine" id="cb2-7" data-line-number="7"><span class="co">        Output:</span></a><a class="sourceLine" id="cb2-8" data-line-number="8"><span class="co">            Light modifying factors, range from [0,1]</span></a><a class="sourceLine" id="cb2-9" data-line-number="9"><span class="co">    """</span></a><a class="sourceLine" id="cb2-10" data-line-number="10">    <span class="kw">global</span> Gamma</a><a class="sourceLine" id="cb2-11" data-line-number="11"></a><a class="sourceLine" id="cb2-12" data-line-number="12">    Fl <span class="op">=</span> <span class="dv">1</span> <span class="op">/</span> (Gamma <span class="op">*</span> Phi <span class="op">+</span> <span class="dv">1</span>)</a><a class="sourceLine" id="cb2-13" data-line-number="13"></a><a class="sourceLine" id="cb2-14" data-line-number="14">    <span class="cf">return</span> Fl</a></code></pre></div><h5 id="temperature-modifier-f_s">2.2 Temperature modifier <span class="math inline">\(f_{S}\)</span></h5><div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb3-1" data-line-number="1"></a><a class="sourceLine" id="cb3-2" data-line-number="2"><span class="kw">def</span> Temperature_modifier(Tair):</a><a class="sourceLine" id="cb3-3" data-line-number="3">    <span class="kw">global</span> Tau</a><a class="sourceLine" id="cb3-4" data-line-number="4">    <span class="kw">global</span> Xo</a><a class="sourceLine" id="cb3-5" data-line-number="5">    <span class="kw">global</span> Smax</a><a class="sourceLine" id="cb3-6" data-line-number="6"></a><a class="sourceLine" id="cb3-7" data-line-number="7">    X <span class="op">=</span> []</a><a class="sourceLine" id="cb3-8" data-line-number="8">    X.append(Tair[<span class="dv">0</span>])</a><a class="sourceLine" id="cb3-9" data-line-number="9"></a><a class="sourceLine" id="cb3-10" data-line-number="10">    <span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">1</span>, <span class="bu">len</span>(Tair)):</a><a class="sourceLine" id="cb3-11" data-line-number="11"></a><a class="sourceLine" id="cb3-12" data-line-number="12">        Xk <span class="op">=</span> X[i <span class="op">-</span> <span class="dv">1</span>] <span class="op">+</span> (<span class="dv">1</span> <span class="op">/</span> Tau) <span class="op">*</span> (Tair[i] <span class="op">-</span> X[i <span class="op">-</span> <span class="dv">1</span>])</a><a class="sourceLine" id="cb3-13" data-line-number="13"></a><a class="sourceLine" id="cb3-14" data-line-number="14">        X.append(Xk)</a><a class="sourceLine" id="cb3-15" data-line-number="15"></a><a class="sourceLine" id="cb3-16" data-line-number="16">    Sk <span class="op">=</span> [x <span class="op">-</span> Xo <span class="cf">if</span> x <span class="op">-</span> Xo <span class="op">&gt;</span> <span class="dv">0</span> <span class="cf">else</span> <span class="dv">0</span> <span class="cf">for</span> x <span class="kw">in</span> X]</a><a class="sourceLine" id="cb3-17" data-line-number="17"></a><a class="sourceLine" id="cb3-18" data-line-number="18">    fs <span class="op">=</span> [s <span class="op">/</span> Smax <span class="cf">if</span> s <span class="op">/</span> Smax <span class="op">&lt;</span> <span class="dv">1</span> <span class="cf">else</span> <span class="dv">1</span> <span class="cf">for</span> s <span class="kw">in</span> Sk]</a><a class="sourceLine" id="cb3-19" data-line-number="19"></a><a class="sourceLine" id="cb3-20" data-line-number="20">    <span class="cf">return</span> fs</a></code></pre></div><h5 id="vpd-modifier-f_d">2.3 VPD modifier <span class="math inline">\(f_{D}\)</span></h5><div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb4-1" data-line-number="1"></a><a class="sourceLine" id="cb4-2" data-line-number="2"><span class="kw">def</span> VPD_modifier(VPD):</a><a class="sourceLine" id="cb4-3" data-line-number="3">    <span class="co">"""</span></a><a class="sourceLine" id="cb4-4" data-line-number="4"><span class="co">    Note: unit for VPD is kPa</span></a><a class="sourceLine" id="cb4-5" data-line-number="5"><span class="co">    """</span></a><a class="sourceLine" id="cb4-6" data-line-number="6">    <span class="kw">global</span> k</a><a class="sourceLine" id="cb4-7" data-line-number="7"></a><a class="sourceLine" id="cb4-8" data-line-number="8">    fd <span class="op">=</span> np.exp(k <span class="op">*</span> VPD)</a><a class="sourceLine" id="cb4-9" data-line-number="9"></a><a class="sourceLine" id="cb4-10" data-line-number="10">    <span class="cf">return</span> fd</a></code></pre></div><h5 id="soil-water-modifier">2.4 Soil water modifier</h5><div class="sourceCode" id="cb5"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb5-1" data-line-number="1"></a><a class="sourceLine" id="cb5-2" data-line-number="2"><span class="kw">def</span> SWC_modifier(Theta_wp, Theta_FC, SWC, alpha, nu):</a><a class="sourceLine" id="cb5-3" data-line-number="3"></a><a class="sourceLine" id="cb5-4" data-line-number="4">    REW <span class="op">=</span> [(x <span class="op">-</span> Theta_wp) <span class="op">/</span> (Theta_FC <span class="op">+</span> Theta_wp) <span class="cf">for</span> x <span class="kw">in</span> SWC]</a><a class="sourceLine" id="cb5-5" data-line-number="5">    Wk <span class="op">=</span> [x <span class="cf">if</span> x <span class="op">&lt;</span> <span class="dv">1</span> <span class="cf">else</span> <span class="dv">1</span> <span class="cf">for</span> x <span class="kw">in</span> REW]</a><a class="sourceLine" id="cb5-6" data-line-number="6"></a><a class="sourceLine" id="cb5-7" data-line-number="7">    fw1 <span class="op">=</span> <span class="dv">1</span> <span class="op">/</span> (<span class="dv">1</span> <span class="op">+</span> <span class="bu">pow</span>((<span class="dv">1</span> <span class="op">-</span> WK) <span class="op">/</span> alpha, nu))</a><a class="sourceLine" id="cb5-8" data-line-number="8"></a><a class="sourceLine" id="cb5-9" data-line-number="9">    fw2 <span class="op">=</span> <span class="dv">1</span> <span class="op">-</span> np.exp(<span class="op">-</span><span class="dv">1</span> <span class="op">*</span> alpha <span class="op">*</span> <span class="bu">pow</span>(Wk, nu))</a><a class="sourceLine" id="cb5-10" data-line-number="10"></a><a class="sourceLine" id="cb5-11" data-line-number="11">    <span class="cf">return</span> fw1, fw2</a></code></pre></div><h5 id="daily-random-error-varepsilon_k">2.5 Daily random error <span class="math inline">\(\varepsilon_{k}\)</span></h5><div class="sourceCode" id="cb6"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb6-1" data-line-number="1"></a><a class="sourceLine" id="cb6-2" data-line-number="2"><span class="kw">def</span> Random_error(n):</a><a class="sourceLine" id="cb6-3" data-line-number="3"></a><a class="sourceLine" id="cb6-4" data-line-number="4">    error <span class="op">=</span> np.random.normal(<span class="dv">0</span>, <span class="dv">1</span>, n)</a><a class="sourceLine" id="cb6-5" data-line-number="5"></a><a class="sourceLine" id="cb6-6" data-line-number="6">    <span class="cf">return</span> error</a></code></pre></div><h4 id="final-model">3 Final model</h4><div class="sourceCode" id="cb7"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb7-1" data-line-number="1"></a><a class="sourceLine" id="cb7-2" data-line-number="2"><span class="kw">def</span> GPP_estimation(Phi, VPD, Tair, n):</a><a class="sourceLine" id="cb7-3" data-line-number="3"></a><a class="sourceLine" id="cb7-4" data-line-number="4">    <span class="kw">global</span> Beta</a><a class="sourceLine" id="cb7-5" data-line-number="5"></a><a class="sourceLine" id="cb7-6" data-line-number="6">    e <span class="op">=</span> Random_error(n)</a><a class="sourceLine" id="cb7-7" data-line-number="7"></a><a class="sourceLine" id="cb7-8" data-line-number="8">    <span class="cf">return</span> Beta <span class="op">*</span> Phi <span class="op">*</span> Light_modifer(Phi) <span class="op">*</span> Temperature_modifier(Tair) <span class="op">*</span> VPD_modifier(VPD) <span class="op">+</span> e</a></code></pre></div><p>Final result just as below:</p><p><img src="/images/GPP.gif"></p><p><strong>Reference:</strong> [1]: Mäkelä, Annikki, et al. "Developing an empirical model of stand GPP with the LUE approach: analysis of eddy covariance data at five contrasting conifer sites in Europe." Global change biology 14.1 (2008): 92-108.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> modeling </tag>
            
            <tag> Forest </tag>
            
            <tag> Carbon flux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spatial data from 2D to 3D</title>
      <link href="/2020/02/25/Spatial-data-from-2D-to-3D/"/>
      <url>/2020/02/25/Spatial-data-from-2D-to-3D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>一般来说，我们展示空间数据，如果不是点云数据的话，大多数为二维的。比如说X轴为longitude，Y轴为latitude，那我们是否可以也利用Z轴，在添加一个属性使其，投影到3D中去呢？比如说Z轴为高程，再比如说对于多时间序列的是空间数据，是否可以把Z轴定义为时间轴等等。所以本blog的目的就是来探索一下可行性，需要说明的是：</p><ul><li>空间数据(矢量数据)来自Basemap自带数据集</li><li>其他数据为随机生成，不具有任何实际意义</li><li>基于Python 3.7.6 (Anaconda)</li></ul><h4 id="导入必须的modules">1.导入必须的modules</h4><div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="im">import</span> matplotlib.pyplot <span class="im">as</span> plt</a><a class="sourceLine" id="cb1-2" data-line-number="2"><span class="im">from</span> mpl_toolkits.mplot3d <span class="im">import</span> Axes3D</a><a class="sourceLine" id="cb1-3" data-line-number="3"><span class="im">from</span> mpl_toolkits.basemap <span class="im">import</span> Basemap</a><a class="sourceLine" id="cb1-4" data-line-number="4"><span class="im">from</span> matplotlib.collections <span class="im">import</span> PolyCollection</a><a class="sourceLine" id="cb1-5" data-line-number="5"><span class="im">from</span> mpl_toolkits.mplot3d.art3d <span class="im">import</span> Poly3DCollection</a><a class="sourceLine" id="cb1-6" data-line-number="6"><span class="im">import</span> matplotlib.animation <span class="im">as</span> animation</a><a class="sourceLine" id="cb1-7" data-line-number="7"><span class="im">import</span> numpy <span class="im">as</span> np</a></code></pre></div><p>其中<strong>animation</strong>是用来生成最后的gif图片，<strong>Axes3D</strong>和<strong>Poly3DCollection</strong>用于创建3D坐标系和3D的polygon图层的。</p><h4 id="数据生成">2.数据生成</h4><div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb2-1" data-line-number="1">lons <span class="op">=</span> np.array([<span class="op">-</span><span class="fl">13.7</span>, <span class="fl">-10.8</span>, <span class="fl">-13.2</span>, <span class="fl">-16.8</span>, <span class="fl">-7.99</span>, <span class="fl">7.5</span>, <span class="fl">-17.3</span>, <span class="fl">-3.7</span>])</a><a class="sourceLine" id="cb2-2" data-line-number="2">lats <span class="op">=</span> np.array([<span class="fl">9.6</span>, <span class="fl">6.3</span>, <span class="fl">8.5</span>, <span class="fl">32.7</span>, <span class="fl">12.5</span>, <span class="fl">8.9</span>, <span class="fl">14.7</span>, <span class="fl">40.39</span>])</a><a class="sourceLine" id="cb2-3" data-line-number="3">points <span class="op">=</span> np.array([<span class="fl">0.6</span>, <span class="fl">0.6</span>, <span class="fl">0.6</span>, <span class="fl">0.6</span>, <span class="fl">0.6</span>, <span class="fl">0.6</span>, <span class="fl">0.6</span>, <span class="fl">0.6</span>])</a><a class="sourceLine" id="cb2-4" data-line-number="4">point1 <span class="op">=</span> np.array([<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">0</span>])</a><a class="sourceLine" id="cb2-5" data-line-number="5"></a><a class="sourceLine" id="cb2-6" data-line-number="6">X <span class="op">=</span> [<span class="op">-</span><span class="dv">20</span>,<span class="dv">15</span>,<span class="dv">15</span>,<span class="op">-</span><span class="dv">20</span>]</a><a class="sourceLine" id="cb2-7" data-line-number="7">Y <span class="op">=</span> [<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">50</span>,<span class="dv">50</span>]</a><a class="sourceLine" id="cb2-8" data-line-number="8">Z<span class="op">=</span> [<span class="fl">0.59</span>,<span class="fl">0.59</span>,<span class="fl">0.59</span>,<span class="fl">0.59</span>]</a><a class="sourceLine" id="cb2-9" data-line-number="9"></a><a class="sourceLine" id="cb2-10" data-line-number="10">verts <span class="op">=</span> [<span class="bu">list</span>(<span class="bu">zip</span>(X,Y,Z))]</a><a class="sourceLine" id="cb2-11" data-line-number="11"></a><a class="sourceLine" id="cb2-12" data-line-number="12">x, y <span class="op">=</span> <span class="bu">map</span>(lons, lats)</a></code></pre></div><p>我们创建8个点，其中point1投影在X和Y轴所在平面上（即底面），point将point1向Z轴抬高0.6个单位，让其悬浮与Z=0.6的位置，并且在相应位置创建一个polygon,这样更具有立体感。</p><h4 id="构造gif函数">3.构造GIF函数</h4><div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="co">## for gif</span></a><a class="sourceLine" id="cb3-2" data-line-number="2"><span class="kw">def</span> update(i, fig, ax):</a><a class="sourceLine" id="cb3-3" data-line-number="3">    ax.view_init(elev<span class="op">=</span><span class="fl">20.</span>, azim<span class="op">=</span>i)</a><a class="sourceLine" id="cb3-4" data-line-number="4">    <span class="cf">return</span> fig, ax</a></code></pre></div><p>其中参数<em>elev</em>表示沿着Z轴的高度，<em>azim</em>是<em>azimuth</em>的缩写，即为方位角</p><h4 id="创建图层">4.创建图层</h4><div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb4-1" data-line-number="1"><span class="bu">map</span> <span class="op">=</span> Basemap(llcrnrlon<span class="op">=-</span><span class="dv">20</span>,llcrnrlat<span class="op">=</span><span class="dv">0</span>,urcrnrlon<span class="op">=</span><span class="dv">15</span>,urcrnrlat<span class="op">=</span><span class="dv">50</span>,</a><a class="sourceLine" id="cb4-2" data-line-number="2">fix_aspect<span class="op">=</span><span class="va">False</span>)</a><a class="sourceLine" id="cb4-3" data-line-number="3"></a><a class="sourceLine" id="cb4-4" data-line-number="4">fig <span class="op">=</span> plt.figure()</a><a class="sourceLine" id="cb4-5" data-line-number="5">ax <span class="op">=</span> Axes3D(fig)</a><a class="sourceLine" id="cb4-6" data-line-number="6"></a><a class="sourceLine" id="cb4-7" data-line-number="7">ax.azim <span class="op">=</span> <span class="dv">270</span></a><a class="sourceLine" id="cb4-8" data-line-number="8">ax.dist <span class="op">=</span> <span class="dv">12</span></a><a class="sourceLine" id="cb4-9" data-line-number="9"></a><a class="sourceLine" id="cb4-10" data-line-number="10">polys <span class="op">=</span> []</a><a class="sourceLine" id="cb4-11" data-line-number="11"><span class="cf">for</span> polygon <span class="kw">in</span> <span class="bu">map</span>.landpolygons:</a><a class="sourceLine" id="cb4-12" data-line-number="12">    polys.append(polygon.get_coords())</a><a class="sourceLine" id="cb4-13" data-line-number="13"></a><a class="sourceLine" id="cb4-14" data-line-number="14"></a><a class="sourceLine" id="cb4-15" data-line-number="15">lc <span class="op">=</span> PolyCollection(polys, edgecolor<span class="op">=</span><span class="st">'black'</span>,</a><a class="sourceLine" id="cb4-16" data-line-number="16">                    facecolor<span class="op">=</span><span class="st">'#DDDDDD'</span>, closed<span class="op">=</span><span class="va">False</span>)</a><a class="sourceLine" id="cb4-17" data-line-number="17"></a><a class="sourceLine" id="cb4-18" data-line-number="18">ax.add_collection3d(lc)</a><a class="sourceLine" id="cb4-19" data-line-number="19">ax.add_collection3d(<span class="bu">map</span>.drawcoastlines(linewidth<span class="op">=</span><span class="fl">0.25</span>))</a><a class="sourceLine" id="cb4-20" data-line-number="20">ax.add_collection3d(<span class="bu">map</span>.drawcountries(linewidth<span class="op">=</span><span class="fl">0.35</span>))</a><a class="sourceLine" id="cb4-21" data-line-number="21"></a><a class="sourceLine" id="cb4-22" data-line-number="22"></a><a class="sourceLine" id="cb4-23" data-line-number="23">lon_step <span class="op">=</span> <span class="dv">10</span></a><a class="sourceLine" id="cb4-24" data-line-number="24">lat_step <span class="op">=</span> <span class="dv">7</span></a><a class="sourceLine" id="cb4-25" data-line-number="25">parallel_lon <span class="op">=</span> np.arange(<span class="op">-</span><span class="dv">20</span>, <span class="dv">15</span>, lat_step)</a><a class="sourceLine" id="cb4-26" data-line-number="26">parallel_lat <span class="op">=</span> np.arange(<span class="dv">0</span>,<span class="dv">50</span>,lon_step)</a><a class="sourceLine" id="cb4-27" data-line-number="27"></a><a class="sourceLine" id="cb4-28" data-line-number="28">ax.scatter3D(x, y, points, color<span class="op">=</span> <span class="st">'r'</span>, alpha<span class="op">=</span><span class="fl">0.8</span>)</a><a class="sourceLine" id="cb4-29" data-line-number="29">ax.scatter3D(x, y, point1,color<span class="op">=</span> <span class="st">'b'</span>, alpha<span class="op">=</span><span class="fl">0.8</span>)</a><a class="sourceLine" id="cb4-30" data-line-number="30">ax.add_collection3d(Poly3DCollection(verts,facecolor <span class="op">=</span> <span class="st">"gray"</span>,alpha <span class="op">=</span> <span class="fl">0.5</span>))</a><a class="sourceLine" id="cb4-31" data-line-number="31"></a><a class="sourceLine" id="cb4-32" data-line-number="32"><span class="co"># label</span></a><a class="sourceLine" id="cb4-33" data-line-number="33">ax.set_xlabel(<span class="st">'Longitude (°E)'</span>, labelpad<span class="op">=</span><span class="dv">20</span>)</a><a class="sourceLine" id="cb4-34" data-line-number="34">ax.set_ylabel(<span class="st">'Latitude (°N)'</span>, labelpad<span class="op">=</span><span class="dv">20</span>)</a><a class="sourceLine" id="cb4-35" data-line-number="35">ax.set_zlabel(<span class="st">'blabla...'</span>, labelpad<span class="op">=</span><span class="dv">20</span>)</a><a class="sourceLine" id="cb4-36" data-line-number="36">ax.set_yticks(parallel_lat)</a><a class="sourceLine" id="cb4-37" data-line-number="37">ax.set_yticklabels(parallel_lat)</a><a class="sourceLine" id="cb4-38" data-line-number="38">ax.set_xticks(parallel_lon)</a><a class="sourceLine" id="cb4-39" data-line-number="39">ax.set_xticklabels(parallel_lon)</a><a class="sourceLine" id="cb4-40" data-line-number="40"></a><a class="sourceLine" id="cb4-41" data-line-number="41"></a><a class="sourceLine" id="cb4-42" data-line-number="42">anim <span class="op">=</span> animation.FuncAnimation(fig, update, frames<span class="op">=</span>np.arange(<span class="dv">0</span>, <span class="dv">360</span>, <span class="dv">2</span>), </a><a class="sourceLine" id="cb4-43" data-line-number="43">                                repeat<span class="op">=</span><span class="va">True</span>, fargs<span class="op">=</span>(fig, ax))</a><a class="sourceLine" id="cb4-44" data-line-number="44"><span class="co">## layout gif</span></a><a class="sourceLine" id="cb4-45" data-line-number="45"><span class="co">## anim.save('Projection.gif', dpi=80, fps=15,writer='imagemagick')</span></a><a class="sourceLine" id="cb4-46" data-line-number="46"><span class="co">##</span></a><a class="sourceLine" id="cb4-47" data-line-number="47">plt.show()</a></code></pre></div><p>最终得到的是如下的gif: <img src="/images/Projection.gif"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Basemap </tag>
            
            <tag> Matplotlib </tag>
            
            <tag> gif </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HEXO 新建博客感想</title>
      <link href="/2020/02/25/HEXO-%E6%96%B0%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%84%9F%E6%83%B3/"/>
      <url>/2020/02/25/HEXO-%E6%96%B0%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%84%9F%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="什么是hexo">1.什么是HEXO</h3><p><strong>HEXO</strong> 是一个利用Markdown渲染的，快速布局博客的框架,在几秒内，即可利用靓丽的主题生成静态网页<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" data-aria-label="https://www.zhihu.com/question/51588481">[1]</span></a></sup>。具体更多的细节请查看<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">官网的doc</a>。</p><h3 id="配套其他软件">2.配套其他软件</h3><p>我们首先需要安装<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js</a>,再在<strong>Node.js</strong>中利用npm利用<code>$ npm install -g hexo-cli</code>安装blog模块，此时在根目录下会有(比较重要的两个)：</p><ul><li>一个'_config.yml'的属性文件，该文件是定义静态网页的各种属性配置，比如网页的title、subtitle、托管的仓库等等。</li><li>一个theme文件夹，该文件顾名思义主要是存放网页主题的配置文件，比如种链接、背景颜色、各种icon的设置等等。</li></ul><p>然后，我们需要在<a href="https://github.com/" target="_blank" rel="noopener">Github</a>上面注册，然后创建仓库用来托管我们的blog，如何设置仓库及其Key可以参考知乎<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" data-aria-label="https://zhuanlan.zhihu.com/p/26625249">[2]</span></a></sup></p><p>最后我们需要一个网页的模板，并且基于该模板进行魔改，最终得到属于自己的blog。模板的选择，可以参考HEXO的官网<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" data-aria-label="https://hexo.io/themes/">[3]</span></a></sup>。一些logo的选择可以到<a href="https://fontawesome.com/" target="_blank" rel="noopener">fontawesome</a>上面下载，然后本地利用一些软件处理得到自己的logo.</p><h3 id="为什么搭建自己博客">3.为什么搭建自己博客</h3><p>当下有很多可以写文章的网站，比如豆瓣、知乎、简书等, 但是假如有利益冲突，被人家举报，就算你花了很多时间来写东西，你写的东西依然可能被屏蔽。所以基于此最安心的方法是搭建一个自己的博客，自由自在。并且HEXO是用Markdown渲染的，意味着，写作如丝般顺滑。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://www.zhihu.com/question/51588481<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://zhuanlan.zhihu.com/p/26625249<a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://hexo.io/themes/<a href="#fnref:3" rev="footnote"> ↩</a></span></li></ol></div></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
            <tag> Matery </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
