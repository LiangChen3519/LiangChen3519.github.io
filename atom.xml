<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Liang Chen&#39;s Blog</title>
  
  <subtitle>田园番茄</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liangchen3519.github.io/"/>
  <updated>2020-02-27T15:40:24.927Z</updated>
  <id>https://liangchen3519.github.io/</id>
  
  <author>
    <name>Liang Chen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Forest Ecosystem GPP Modeling</title>
    <link href="https://liangchen3519.github.io/2020/02/26/Forest-Ecosystem-Modeling/"/>
    <id>https://liangchen3519.github.io/2020/02/26/Forest-Ecosystem-Modeling/</id>
    <published>2020-02-26T20:19:43.000Z</published>
    <updated>2020-02-27T15:40:24.927Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>This Blog aims to simply step-by-step replicate (not so strict) the basic results of the paper titled as <em>Developing an empirical model of stand GPP with the LUE model approach: analysis of eddy covriance data at five constrasting conifer sites in Europe</em> <span class="math inline">\(^{[1]}\)</span>. Mäkelä's paper developed a statistical model for daily gross primary production (GPP) in boreal and temperate coniferous forests based on <strong>Light Use Efficiency (LUE)</strong>. So we plan to apply weather dataset to simulate daily Gross Primary Production (GPP) by using Python.</p><p>To make the model easily to understand, we just using the fixed parameters supported by authors in the paper. And the fixed parameters list as follow:</p><table><thead><tr class="header"><th style="text-align: left;">Parameter</th><th style="text-align: left;">Meaning</th><th style="text-align: left;">Unit</th><th style="text-align: left;">Value</th></tr></thead><tbody></tbody></table>|<span class="math inline">\(\beta\)</span>|Potential daily LUE|<div style="width: 100pt"><span class="math inline">\(g \cdot C \cdot m^{-2}\)</span></div><p>|0.513| |<span class="math inline">\(\gamma\)</span>|Empirical parameter|<span class="math inline">\(m^{2}\cdot mol^{-1}\)</span>|0.0196| | <span class="math inline">\(\kappa\)</span> | Empirical parameter |<span class="math inline">\(kPa^{-1}\)</span>| -0.389 | | $$ | Time constant of delay process |<span class="math inline">\(days\)</span>| 7.2 | | <span class="math inline">\(X_{0}\)</span> | Shreshold value of the delayed temperature |$ ^{}C$| -4 | | <span class="math inline">\(S_{max}\)</span> | Empirical parameter |$ ^{}C$| 17.3 |</p><p>And the main model is: <span class="math display">\[P_{k} = \beta \Phi_{k}\prod_i f_{ik}+\varepsilon_{k} \tag1\]</span></p><p>Where:</p><p><span class="math inline">\(P_{k}\)</span> is GPP (<span class="math inline">\(gC\cdot m^{2}\cdot day^{-1}\)</span>).</p><p><span class="math inline">\(\prod_{i} f_{ik}\)</span> for me, means product of the 4 different modifying factors.</p><p><span class="math inline">\(\varepsilon_{k}\)</span> here, i assumed that, follows the normal distribution.</p><p><span class="math inline">\(\Theta\)</span> is APAR with unit <span class="math inline">\(mol \cdot m^{-2}\)</span>.</p><p>The model is based on <strong>Daily data</strong>, so before we input all variables into model, make sure the time span! Besides, due to input variables include <strong>VPD</strong> and <strong>PAR</strong>, however the weather dataset struct (shows as below:)</p><p><img src="/images/WEATHER_DATA.png"></p><p>has no such variables, so we have to convert <strong>air pressur</strong> and <strong>air temperature</strong> to <strong>VPD</strong> and <strong>PAR</strong>, respectively. Here we star:</p><h4 id="define-the-constant">1 Define the constant</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">Beta = <span class="number">0.513</span>  <span class="comment"># Potential daily LUE</span></span><br><span class="line">Gamma = <span class="number">0.0196</span>  <span class="comment"># Empirical parameter</span></span><br><span class="line">Kappa = <span class="number">-0.389</span>  <span class="comment"># Empirical parameter</span></span><br><span class="line">Tau = <span class="number">7.2</span>  <span class="comment"># Time constant of delay process</span></span><br><span class="line">Xo = <span class="number">-4</span>  <span class="comment"># Shreshold value of the delayed temperature</span></span><br><span class="line">Smax = <span class="number">17.3</span>  <span class="comment"># Empirical parameter</span></span><br><span class="line">k = <span class="number">-0.389</span>  <span class="comment"># Empirical parameter</span></span><br></pre></td></tr></tbody></table></figure><h4 id="calculation-for-modifying-factors">2 Calculation for modifying factors</h4><h5 id="light-modifier-f_l">2.1 Light modifier <span class="math inline">\(f_{L}\)</span></h5><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Light_modifer</span><span class="params">(Phi)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    daily light modifer</span></span><br><span class="line"><span class="string">        Input:</span></span><br><span class="line"><span class="string">            Phi is daily APAR with unit of mol m^-2</span></span><br><span class="line"><span class="string">        Output:</span></span><br><span class="line"><span class="string">            Light modifying factors, range from [0,1]</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">global</span> Gamma</span><br><span class="line"></span><br><span class="line">    Fl = <span class="number">1</span> / (Gamma * Phi + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Fl</span><br></pre></td></tr></tbody></table></figure><h5 id="temperature-modifier-f_s">2.2 Temperature modifier <span class="math inline">\(f_{S}\)</span></h5><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Temperature_modifier</span><span class="params">(Tair)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> Tau</span><br><span class="line">    <span class="keyword">global</span> Xo</span><br><span class="line">    <span class="keyword">global</span> Smax</span><br><span class="line"></span><br><span class="line">    X = []</span><br><span class="line">    X.append(Tair[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(Tair)):</span><br><span class="line"></span><br><span class="line">        Xk = X[i - <span class="number">1</span>] + (<span class="number">1</span> / Tau) * (Tair[i] - X[i - <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        X.append(Xk)</span><br><span class="line"></span><br><span class="line">    Sk = [x - Xo <span class="keyword">if</span> x - Xo &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> x <span class="keyword">in</span> X]</span><br><span class="line"></span><br><span class="line">    fs = [s / Smax <span class="keyword">if</span> s / Smax &lt; <span class="number">1</span> <span class="keyword">else</span> <span class="number">1</span> <span class="keyword">for</span> s <span class="keyword">in</span> Sk]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fs</span><br></pre></td></tr></tbody></table></figure><h5 id="vpd-modifier-f_d">2.3 VPD modifier <span class="math inline">\(f_{D}\)</span></h5><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">VPD_modifier</span><span class="params">(VPD)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Note: unit for VPD is kPa</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">global</span> k</span><br><span class="line"></span><br><span class="line">    fd = np.exp(k * VPD)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fd</span><br></pre></td></tr></tbody></table></figure><h5 id="soil-water-modifier">2.4 Soil water modifier</h5><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SWC_modifier</span><span class="params">(Theta_wp, Theta_FC, SWC, alpha, nu)</span>:</span></span><br><span class="line"></span><br><span class="line">    REW = [(x - Theta_wp) / (Theta_FC + Theta_wp) <span class="keyword">for</span> x <span class="keyword">in</span> SWC]</span><br><span class="line">    Wk = [x <span class="keyword">if</span> x &lt; <span class="number">1</span> <span class="keyword">else</span> <span class="number">1</span> <span class="keyword">for</span> x <span class="keyword">in</span> REW]</span><br><span class="line"></span><br><span class="line">    fw1 = <span class="number">1</span> / (<span class="number">1</span> + pow((<span class="number">1</span> - WK) / alpha, nu))</span><br><span class="line"></span><br><span class="line">    fw2 = <span class="number">1</span> - np.exp(<span class="number">-1</span> * alpha * pow(Wk, nu))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fw1, fw2</span><br></pre></td></tr></tbody></table></figure><h5 id="daily-random-error-varepsilon_k">2.5 Daily random error <span class="math inline">\(\varepsilon_{k}\)</span></h5><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Random_error</span><span class="params">(n)</span>:</span></span><br><span class="line"></span><br><span class="line">    error = np.random.normal(<span class="number">0</span>, <span class="number">1</span>, n)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> error</span><br></pre></td></tr></tbody></table></figure><h4 id="final-model">3 Final model</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GPP_estimation</span><span class="params">(Phi, VPD, Tair, n)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">global</span> Beta</span><br><span class="line"></span><br><span class="line">    e = Random_error(n)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Beta * Phi * Light_modifer(Phi) * Temperature_modifier(Tair) * VPD_modifier(VPD) + e</span><br></pre></td></tr></tbody></table></figure><p>Final result just as below:</p><p><img src="/images/GPP.gif"></p><p><strong>Reference:</strong> [1]: Mäkelä, Annikki, et al. "Developing an empirical model of stand GPP with the LUE approach: analysis of eddy covariance data at five contrasting conifer sites in Europe." Global change biology 14.1 (2008): 92-108.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;This Blog aims to simply step-by-step 
      
    
    </summary>
    
    
      <category term="Python" scheme="https://liangchen3519.github.io/categories/Python/"/>
    
    
      <category term="modeling" scheme="https://liangchen3519.github.io/tags/modeling/"/>
    
      <category term="Forest" scheme="https://liangchen3519.github.io/tags/Forest/"/>
    
      <category term="Carbon flux" scheme="https://liangchen3519.github.io/tags/Carbon-flux/"/>
    
  </entry>
  
  <entry>
    <title>Spatial data from 2D to 3D</title>
    <link href="https://liangchen3519.github.io/2020/02/25/Spatial-data-from-2D-to-3D/"/>
    <id>https://liangchen3519.github.io/2020/02/25/Spatial-data-from-2D-to-3D/</id>
    <published>2020-02-25T08:33:04.000Z</published>
    <updated>2020-02-25T09:18:05.427Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>一般来说，我们展示空间数据，如果不是点云数据的话，大多数为二维的。比如说X轴为longitude，Y轴为latitude，那我们是否可以也利用Z轴，在添加一个属性使其，投影到3D中去呢？比如说Z轴为高程，再比如说对于多时间序列的是空间数据，是否可以把Z轴定义为时间轴等等。所以本blog的目的就是来探索一下可行性，需要说明的是：</p><ul><li>空间数据(矢量数据)来自Basemap自带数据集</li><li>其他数据为随机生成，不具有任何实际意义</li><li>基于Python 3.7.6 (Anaconda)</li></ul><h4 id="导入必须的modules">1.导入必须的modules</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.basemap <span class="keyword">import</span> Basemap</span><br><span class="line"><span class="keyword">from</span> matplotlib.collections <span class="keyword">import</span> PolyCollection</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d.art3d <span class="keyword">import</span> Poly3DCollection</span><br><span class="line"><span class="keyword">import</span> matplotlib.animation <span class="keyword">as</span> animation</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></tbody></table></figure><p>其中<strong>animation</strong>是用来生成最后的gif图片，<strong>Axes3D</strong>和<strong>Poly3DCollection</strong>用于创建3D坐标系和3D的polygon图层的。</p><h4 id="数据生成">2.数据生成</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">lons = np.array([<span class="number">-13.7</span>, <span class="number">-10.8</span>, <span class="number">-13.2</span>, <span class="number">-16.8</span>, <span class="number">-7.99</span>, <span class="number">7.5</span>, <span class="number">-17.3</span>, <span class="number">-3.7</span>])</span><br><span class="line">lats = np.array([<span class="number">9.6</span>, <span class="number">6.3</span>, <span class="number">8.5</span>, <span class="number">32.7</span>, <span class="number">12.5</span>, <span class="number">8.9</span>, <span class="number">14.7</span>, <span class="number">40.39</span>])</span><br><span class="line">points = np.array([<span class="number">0.6</span>, <span class="number">0.6</span>, <span class="number">0.6</span>, <span class="number">0.6</span>, <span class="number">0.6</span>, <span class="number">0.6</span>, <span class="number">0.6</span>, <span class="number">0.6</span>])</span><br><span class="line">point1 = np.array([<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">X = [<span class="number">-20</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="number">-20</span>]</span><br><span class="line">Y = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">50</span>,<span class="number">50</span>]</span><br><span class="line">Z= [<span class="number">0.59</span>,<span class="number">0.59</span>,<span class="number">0.59</span>,<span class="number">0.59</span>]</span><br><span class="line"></span><br><span class="line">verts = [list(zip(X,Y,Z))]</span><br><span class="line"></span><br><span class="line">x, y = map(lons, lats)</span><br></pre></td></tr></tbody></table></figure><p>我们创建8个点，其中point1投影在X和Y轴所在平面上（即底面），point将point1向Z轴抬高0.6个单位，让其悬浮与Z=0.6的位置，并且在相应位置创建一个polygon,这样更具有立体感。</p><h4 id="构造gif函数">3.构造GIF函数</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">## for gif</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(i, fig, ax)</span>:</span></span><br><span class="line">    ax.view_init(elev=<span class="number">20.</span>, azim=i)</span><br><span class="line">    <span class="keyword">return</span> fig, ax</span><br></pre></td></tr></tbody></table></figure><p>其中参数<em>elev</em>表示沿着Z轴的高度，<em>azim</em>是<em>azimuth</em>的缩写，即为方位角</p><h4 id="创建图层">4.创建图层</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">map = Basemap(llcrnrlon=<span class="number">-20</span>,llcrnrlat=<span class="number">0</span>,urcrnrlon=<span class="number">15</span>,urcrnrlat=<span class="number">50</span>,</span><br><span class="line">fix_aspect=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = Axes3D(fig)</span><br><span class="line"></span><br><span class="line">ax.azim = <span class="number">270</span></span><br><span class="line">ax.dist = <span class="number">12</span></span><br><span class="line"></span><br><span class="line">polys = []</span><br><span class="line"><span class="keyword">for</span> polygon <span class="keyword">in</span> map.landpolygons:</span><br><span class="line">    polys.append(polygon.get_coords())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lc = PolyCollection(polys, edgecolor=<span class="string">'black'</span>,</span><br><span class="line">                    facecolor=<span class="string">'#DDDDDD'</span>, closed=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">ax.add_collection3d(lc)</span><br><span class="line">ax.add_collection3d(map.drawcoastlines(linewidth=<span class="number">0.25</span>))</span><br><span class="line">ax.add_collection3d(map.drawcountries(linewidth=<span class="number">0.35</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lon_step = <span class="number">10</span></span><br><span class="line">lat_step = <span class="number">7</span></span><br><span class="line">parallel_lon = np.arange(<span class="number">-20</span>, <span class="number">15</span>, lat_step)</span><br><span class="line">parallel_lat = np.arange(<span class="number">0</span>,<span class="number">50</span>,lon_step)</span><br><span class="line"></span><br><span class="line">ax.scatter3D(x, y, points, color= <span class="string">'r'</span>, alpha=<span class="number">0.8</span>)</span><br><span class="line">ax.scatter3D(x, y, point1,color= <span class="string">'b'</span>, alpha=<span class="number">0.8</span>)</span><br><span class="line">ax.add_collection3d(Poly3DCollection(verts,facecolor = <span class="string">"gray"</span>,alpha = <span class="number">0.5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># label</span></span><br><span class="line">ax.set_xlabel(<span class="string">'Longitude (°E)'</span>, labelpad=<span class="number">20</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'Latitude (°N)'</span>, labelpad=<span class="number">20</span>)</span><br><span class="line">ax.set_zlabel(<span class="string">'blabla...'</span>, labelpad=<span class="number">20</span>)</span><br><span class="line">ax.set_yticks(parallel_lat)</span><br><span class="line">ax.set_yticklabels(parallel_lat)</span><br><span class="line">ax.set_xticks(parallel_lon)</span><br><span class="line">ax.set_xticklabels(parallel_lon)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">anim = animation.FuncAnimation(fig, update, frames=np.arange(<span class="number">0</span>, <span class="number">360</span>, <span class="number">2</span>), </span><br><span class="line">                                repeat=<span class="literal">True</span>, fargs=(fig, ax))</span><br><span class="line"><span class="comment">## layout gif</span></span><br><span class="line"><span class="comment">## anim.save('Projection.gif', dpi=80, fps=15,writer='imagemagick')</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p>最终得到的是如下的gif: <img src="/images/Projection.gif"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;一般来说，我们展示空间数据，如果不是点云数据的话，大多数为二维的。比如说X轴
      
    
    </summary>
    
    
      <category term="Python" scheme="https://liangchen3519.github.io/categories/Python/"/>
    
    
      <category term="Basemap" scheme="https://liangchen3519.github.io/tags/Basemap/"/>
    
      <category term="Matplotlib" scheme="https://liangchen3519.github.io/tags/Matplotlib/"/>
    
      <category term="gif" scheme="https://liangchen3519.github.io/tags/gif/"/>
    
  </entry>
  
  <entry>
    <title>HEXO 新建博客感想</title>
    <link href="https://liangchen3519.github.io/2020/02/25/HEXO-%E6%96%B0%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%84%9F%E6%83%B3/"/>
    <id>https://liangchen3519.github.io/2020/02/25/HEXO-%E6%96%B0%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%84%9F%E6%83%B3/</id>
    <published>2020-02-24T22:15:26.000Z</published>
    <updated>2020-02-25T08:28:51.174Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="什么是hexo">1.什么是HEXO</h3><p><strong>HEXO</strong> 是一个利用Markdown渲染的，快速布局博客的框架,在几秒内，即可利用靓丽的主题生成静态网页<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" data-aria-label="https://www.zhihu.com/question/51588481">[1]</span></a></sup>。具体更多的细节请查看<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">官网的doc</a>。</p><h3 id="配套其他软件">2.配套其他软件</h3><p>我们首先需要安装<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js</a>,再在<strong>Node.js</strong>中利用npm利用<code>$ npm install -g hexo-cli</code>安装blog模块，此时在根目录下会有(比较重要的两个)：</p><ul><li>一个'_config.yml'的属性文件，该文件是定义静态网页的各种属性配置，比如网页的title、subtitle、托管的仓库等等。</li><li>一个theme文件夹，该文件顾名思义主要是存放网页主题的配置文件，比如种链接、背景颜色、各种icon的设置等等。</li></ul><p>然后，我们需要在<a href="https://github.com/" target="_blank" rel="noopener">Github</a>上面注册，然后创建仓库用来托管我们的blog，如何设置仓库及其Key可以参考知乎<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" data-aria-label="https://zhuanlan.zhihu.com/p/26625249">[2]</span></a></sup></p><p>最后我们需要一个网页的模板，并且基于该模板进行魔改，最终得到属于自己的blog。模板的选择，可以参考HEXO的官网<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" data-aria-label="https://hexo.io/themes/">[3]</span></a></sup>。一些logo的选择可以到<a href="https://fontawesome.com/" target="_blank" rel="noopener">fontawesome</a>上面下载，然后本地利用一些软件处理得到自己的logo.</p><h3 id="为什么搭建自己博客">3.为什么搭建自己博客</h3><p>当下有很多可以写文章的网站，比如豆瓣、知乎、简书等, 但是假如有利益冲突，被人家举报，就算你花了很多时间来写东西，你写的东西依然可能被屏蔽。所以基于此最安心的方法是搭建一个自己的博客，自由自在。并且HEXO是用Markdown渲染的，意味着，写作如丝般顺滑。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://www.zhihu.com/question/51588481<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://zhuanlan.zhihu.com/p/26625249<a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://hexo.io/themes/<a href="#fnref:3" rev="footnote"> ↩</a></span></li></ol></div></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;什么是hexo&quot;&gt;1.什么是HEXO&lt;/h3&gt;
&lt;p&gt;&lt;stron
      
    
    </summary>
    
    
      <category term="Markdown" scheme="https://liangchen3519.github.io/categories/Markdown/"/>
    
    
      <category term="HEXO" scheme="https://liangchen3519.github.io/tags/HEXO/"/>
    
      <category term="Matery" scheme="https://liangchen3519.github.io/tags/Matery/"/>
    
      <category term="博客" scheme="https://liangchen3519.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
