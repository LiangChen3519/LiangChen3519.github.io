<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Liang Chen&#39;s Blog</title>
  
  <subtitle>田园番茄</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liangchen3519.github.io/"/>
  <updated>2020-02-27T07:41:36.661Z</updated>
  <id>https://liangchen3519.github.io/</id>
  
  <author>
    <name>Liang Chen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Forest Ecosystem Modeling</title>
    <link href="https://liangchen3519.github.io/2020/02/26/Forest-Ecosystem-Modeling/"/>
    <id>https://liangchen3519.github.io/2020/02/26/Forest-Ecosystem-Modeling/</id>
    <published>2020-02-26T20:19:43.000Z</published>
    <updated>2020-02-27T07:41:36.661Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>This Blog aims to simply step-by step replicate (not so strict) the basic results of the paper titled as <em>Developing an empirical model of stand GPP with the LUE model approach: analysis of eddy covriance data at five constrasting conifer sites in Europe</em> $^{[1]}$. Mäkelä’s paper developed a statistical model for daily gross primary production (GPP) in boreal and temperate coniferous forests based on <strong>Light Use Efficiency (LUE)</strong>. So we plan to apply weather dataset to simulate daily Gross Primary Production (GPP) by using Python.</p><p>To make the model easily to understand, we just using the fixed parameters supported by authors in the paper. And the fixed parameters list as follow:</p><div class="table-container"><table><thead><tr><th style="text-align:left">Parameter</th><th style="text-align:left">Meaning</th><th style="text-align:left">Unit</th><th style="text-align:left">Value</th></tr></thead><tbody><tr><td style="text-align:left">$\beta$</td><td style="text-align:left">Potential daily LUE</td><td style="text-align:left"><div style="width: 100pt"> $g \cdot C \cdot m^{-2}$ </div></td><td style="text-align:left">0.513</td></tr><tr><td style="text-align:left">$\gamma$</td><td style="text-align:left">Empirical parameter</td><td style="text-align:left">$m^{2}\cdot mol^{-1}$</td><td style="text-align:left">0.0196</td></tr><tr><td style="text-align:left">$\kappa$</td><td style="text-align:left">Empirical parameter</td><td style="text-align:left">$kPa^{-1}$</td><td style="text-align:left">-0.389</td></tr><tr><td style="text-align:left">$\tau $</td><td style="text-align:left">Time constant of delay process</td><td style="text-align:left">$days$</td><td style="text-align:left">7.2</td></tr><tr><td style="text-align:left">$X_{0}$</td><td style="text-align:left">Shreshold value of the delayed temperature</td><td style="text-align:left">$ ^{\circ}C$</td><td style="text-align:left">-4</td></tr><tr><td style="text-align:left">$S_{max}$</td><td style="text-align:left">Empirical parameter</td><td style="text-align:left">$ ^{\circ}C$</td><td style="text-align:left">17.3</td></tr></tbody></table></div><p> And the main model is:</p><script type="math/tex; mode=display">P_{k} = \beta \Phi_{k}\prod_i f_{ik}+\varepsilon_{k} \tag1</script><p> Where:</p><p> $P_{k}$ is GPP ($gC\cdot m^{2}\cdot day^{-1}$).</p><p> $\prod<em>{i} f</em>{ik}$ for me, means product of the 4 different modifying factors.<br> $\varepsilon_{k}$ here, i assumed that, follows the normal distribution.<br> $\Theta$ is APAR with unit $mol \cdot m^{-2}$.</p><p>The model is based on <strong>Daily data</strong>, so before we input all variables into model, make sure the time span! Besides, due to input variables include <strong>VPD</strong> and <strong>PAR</strong>, however the weather dataset struct (shows as below:)</p><p><img src="/images/WEATHER_DATA.png" alt=""></p><p> has no such variables, so we have to convert <strong>air pressur</strong> and <strong>air temperature</strong> to <strong>VPD</strong> and <strong>PAR</strong>, respectively.<br>Here we star:</p><h4 id="1-Define-the-constant"><a href="#1-Define-the-constant" class="headerlink" title="1 Define the constant"></a>1 Define the constant</h4><pre class=" language-lang-python"><code class="language-lang-python">Beta = 0.513  # Potential daily LUEGamma = 0.0196  # Empirical parameterKappa = -0.389  # Empirical parameterTau = 7.2  # Time constant of delay processXo = -4  # Shreshold value of the delayed temperatureSmax = 17.3  # Empirical parameterk = -0.389  # Empirical parameter</code></pre><h4 id="2-Calculation-for-modifying-factors"><a href="#2-Calculation-for-modifying-factors" class="headerlink" title="2 Calculation for modifying factors"></a>2 Calculation for modifying factors</h4><h5 id="2-1-Light-modifier-f-L"><a href="#2-1-Light-modifier-f-L" class="headerlink" title="2.1 Light modifier $f_{L}$"></a>2.1 Light modifier $f_{L}$</h5><pre class=" language-lang-python"><code class="language-lang-python">def Light_modifer(Phi):    """    daily light modifer        Input:            Phi is daily APAR with unit of mol m^-2        Output:            Light modifying factors, range from [0,1]    """    global Gamma    Fl = 1 / (Gamma * Phi + 1)    return Fl</code></pre><h5 id="2-2-Temperature-modifier-f-S"><a href="#2-2-Temperature-modifier-f-S" class="headerlink" title="2.2 Temperature modifier $f_{S}$"></a>2.2 Temperature modifier $f_{S}$</h5><pre class=" language-lang-python"><code class="language-lang-python">def Temperature_modifier(Tair):    global Tau    global Xo    global Smax    X = []    X.append(Tair[0])    for i in range(1, len(Tair)):        Xk = X[i - 1] + (1 / Tau) * (Tair[i] - X[i - 1])        X.append(Xk)    Sk = [x - Xo if x - Xo > 0 else 0 for x in X]    fs = [s / Smax if s / Smax < 1 else 1 for s in Sk]    return fs</code></pre><h5 id="2-3-VPD-modifier-f-D"><a href="#2-3-VPD-modifier-f-D" class="headerlink" title="2.3 VPD modifier $f_{D}$"></a>2.3 VPD modifier $f_{D}$</h5><pre class=" language-lang-python"><code class="language-lang-python">def VPD_modifier(VPD):    """    Note: unit for VPD is kPa    """    global k    fd = np.exp(k * VPD)    return fd</code></pre><h5 id="2-4-Soil-water-modifier"><a href="#2-4-Soil-water-modifier" class="headerlink" title="2.4 Soil water modifier"></a>2.4 Soil water modifier</h5><pre class=" language-lang-python"><code class="language-lang-python">def SWC_modifier(Theta_wp, Theta_FC, SWC, alpha, nu):    REW = [(x - Theta_wp) / (Theta_FC + Theta_wp) for x in SWC]    Wk = [x if x < 1 else 1 for x in REW]    fw1 = 1 / (1 + pow((1 - WK) / alpha, nu))    fw2 = 1 - np.exp(-1 * alpha * pow(Wk, nu))    return fw1, fw2</code></pre><h5 id="2-5-Daily-random-error-varepsilon-k"><a href="#2-5-Daily-random-error-varepsilon-k" class="headerlink" title="2.5 Daily random error $\varepsilon_{k}$"></a>2.5 Daily random error $\varepsilon_{k}$</h5><pre class=" language-lang-python"><code class="language-lang-python">def Random_error(n):    error = np.random.normal(0, 1, n)    return error</code></pre><h4 id="3-Final-model"><a href="#3-Final-model" class="headerlink" title="3 Final model"></a>3 Final model</h4><pre class=" language-lang-python"><code class="language-lang-python">def GPP_estimation(Phi, VPD, Tair, n):    global Beta    e = Random_error(n)    return Beta * Phi * Light_modifer(Phi) * Temperature_modifier(Tair) * VPD_modifier(VPD) + e</code></pre><p>Final result just as below:</p><p><img src="/images/GPP.gif" alt=""></p><p><strong>Reference:</strong><br>[1]: Mäkelä, Annikki, et al. “Developing an empirical model of stand GPP with the LUE approach: analysis of eddy covariance data at five contrasting conifer sites in Europe.” Global change biology 14.1 (2008): 92-108.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;This Blog aims to simply step-by step 
      
    
    </summary>
    
    
      <category term="Python" scheme="https://liangchen3519.github.io/categories/Python/"/>
    
    
      <category term="modeling" scheme="https://liangchen3519.github.io/tags/modeling/"/>
    
      <category term="Forest" scheme="https://liangchen3519.github.io/tags/Forest/"/>
    
      <category term="Carbon flux" scheme="https://liangchen3519.github.io/tags/Carbon-flux/"/>
    
  </entry>
  
  <entry>
    <title>Spatial data from 2D to 3D</title>
    <link href="https://liangchen3519.github.io/2020/02/25/Spatial-data-from-2D-to-3D/"/>
    <id>https://liangchen3519.github.io/2020/02/25/Spatial-data-from-2D-to-3D/</id>
    <published>2020-02-25T08:33:04.000Z</published>
    <updated>2020-02-25T09:18:05.427Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>一般来说，我们展示空间数据，如果不是点云数据的话，大多数为二维的。比如说X轴为longitude，Y轴为latitude，那我们是否可以也利用Z轴，在添加一个属性使其，投影到3D中去呢？比如说Z轴为高程，再比如说对于多时间序列的是空间数据，是否可以把Z轴定义为时间轴等等。所以本blog的目的就是来探索一下可行性，需要说明的是：</p><ul><li>空间数据(矢量数据)来自Basemap自带数据集</li><li>其他数据为随机生成，不具有任何实际意义</li><li>基于Python 3.7.6 (Anaconda)</li></ul><h4 id="1-导入必须的modules"><a href="#1-导入必须的modules" class="headerlink" title="1.导入必须的modules"></a>1.导入必须的modules</h4><pre class=" language-lang-python"><code class="language-lang-python">import matplotlib.pyplot as pltfrom mpl_toolkits.mplot3d import Axes3Dfrom mpl_toolkits.basemap import Basemapfrom matplotlib.collections import PolyCollectionfrom mpl_toolkits.mplot3d.art3d import Poly3DCollectionimport matplotlib.animation as animationimport numpy as np</code></pre><p>其中<strong>animation</strong>是用来生成最后的gif图片，<strong>Axes3D</strong>和<strong>Poly3DCollection</strong>用于创建3D坐标系和3D的polygon图层的。</p><h4 id="2-数据生成"><a href="#2-数据生成" class="headerlink" title="2.数据生成"></a>2.数据生成</h4><pre class=" language-lang-python"><code class="language-lang-python">lons = np.array([-13.7, -10.8, -13.2, -16.8, -7.99, 7.5, -17.3, -3.7])lats = np.array([9.6, 6.3, 8.5, 32.7, 12.5, 8.9, 14.7, 40.39])points = np.array([0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6])point1 = np.array([0,0,0,0,0,0,0,0])X = [-20,15,15,-20]Y = [0,0,50,50]Z= [0.59,0.59,0.59,0.59]verts = [list(zip(X,Y,Z))]x, y = map(lons, lats)</code></pre><p>我们创建8个点，其中point1投影在X和Y轴所在平面上（即底面），point将point1向Z轴抬高0.6个单位，让其悬浮与Z=0.6的位置，并且在相应位置创建一个polygon,这样更具有立体感。</p><h4 id="3-构造GIF函数"><a href="#3-构造GIF函数" class="headerlink" title="3.构造GIF函数"></a>3.构造GIF函数</h4><pre class=" language-lang-python"><code class="language-lang-python">## for gifdef update(i, fig, ax):    ax.view_init(elev=20., azim=i)    return fig, ax</code></pre><p>其中参数<em>elev</em>表示沿着Z轴的高度，<em>azim</em>是<em>azimuth</em>的缩写，即为方位角</p><h4 id="4-创建图层"><a href="#4-创建图层" class="headerlink" title="4.创建图层"></a>4.创建图层</h4><pre class=" language-lang-python"><code class="language-lang-python">map = Basemap(llcrnrlon=-20,llcrnrlat=0,urcrnrlon=15,urcrnrlat=50,fix_aspect=False)fig = plt.figure()ax = Axes3D(fig)ax.azim = 270ax.dist = 12polys = []for polygon in map.landpolygons:    polys.append(polygon.get_coords())lc = PolyCollection(polys, edgecolor='black',                    facecolor='#DDDDDD', closed=False)ax.add_collection3d(lc)ax.add_collection3d(map.drawcoastlines(linewidth=0.25))ax.add_collection3d(map.drawcountries(linewidth=0.35))lon_step = 10lat_step = 7parallel_lon = np.arange(-20, 15, lat_step)parallel_lat = np.arange(0,50,lon_step)ax.scatter3D(x, y, points, color= 'r', alpha=0.8)ax.scatter3D(x, y, point1,color= 'b', alpha=0.8)ax.add_collection3d(Poly3DCollection(verts,facecolor = "gray",alpha = 0.5))# labelax.set_xlabel('Longitude (°E)', labelpad=20)ax.set_ylabel('Latitude (°N)', labelpad=20)ax.set_zlabel('blabla...', labelpad=20)ax.set_yticks(parallel_lat)ax.set_yticklabels(parallel_lat)ax.set_xticks(parallel_lon)ax.set_xticklabels(parallel_lon)anim = animation.FuncAnimation(fig, update, frames=np.arange(0, 360, 2),                                 repeat=True, fargs=(fig, ax))## layout gif## anim.save('Projection.gif', dpi=80, fps=15,writer='imagemagick')##plt.show()</code></pre><p>最终得到的是如下的gif:<br><img src="/images/Projection.gif" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;一般来说，我们展示空间数据，如果不是点云数据的话，大多数为二维的。比如说X轴
      
    
    </summary>
    
    
      <category term="Python" scheme="https://liangchen3519.github.io/categories/Python/"/>
    
    
      <category term="Basemap" scheme="https://liangchen3519.github.io/tags/Basemap/"/>
    
      <category term="Matplotlib" scheme="https://liangchen3519.github.io/tags/Matplotlib/"/>
    
      <category term="gif" scheme="https://liangchen3519.github.io/tags/gif/"/>
    
  </entry>
  
  <entry>
    <title>HEXO 新建博客感想</title>
    <link href="https://liangchen3519.github.io/2020/02/25/HEXO-%E6%96%B0%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%84%9F%E6%83%B3/"/>
    <id>https://liangchen3519.github.io/2020/02/25/HEXO-%E6%96%B0%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%84%9F%E6%83%B3/</id>
    <published>2020-02-24T22:15:26.000Z</published>
    <updated>2020-02-25T08:28:51.174Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="1-什么是HEXO"><a href="#1-什么是HEXO" class="headerlink" title="1.什么是HEXO"></a>1.什么是HEXO</h3><p><strong>HEXO</strong> 是一个利用Markdown渲染的，快速布局博客的框架,在几秒内，即可利用靓丽的主题生成静态网页<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="https://www.zhihu.com/question/51588481">[1]</span></a></sup>。具体更多的细节请查看<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">官网的doc</a>。</p><h3 id="2-配套其他软件"><a href="#2-配套其他软件" class="headerlink" title="2.配套其他软件"></a>2.配套其他软件</h3><p>我们首先需要安装<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js</a>,再在<strong>Node.js</strong>中利用npm利用<code>$ npm install -g hexo-cli</code>安装blog模块，此时在根目录下会有(比较重要的两个)：</p><ul><li>一个’_config.yml’的属性文件，该文件是定义静态网页的各种属性配置，比如网页的title、subtitle、托管的仓库等等。</li><li>一个theme文件夹，该文件顾名思义主要是存放网页主题的配置文件，比如种链接、背景颜色、各种icon的设置等等。</li></ul><p>然后，我们需要在<a href="https://github.com/" target="_blank" rel="noopener">Github</a>上面注册，然后创建仓库用来托管我们的blog，如何设置仓库及其Key可以参考知乎<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="https://zhuanlan.zhihu.com/p/26625249">[2]</span></a></sup></p><p>最后我们需要一个网页的模板，并且基于该模板进行魔改，最终得到属于自己的blog。模板的选择，可以参考HEXO的官网<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="https://hexo.io/themes/">[3]</span></a></sup>。一些logo的选择可以到<a href="https://fontawesome.com/" target="_blank" rel="noopener">fontawesome</a>上面下载，然后本地利用一些软件处理得到自己的logo.</p><h3 id="3-为什么搭建自己博客"><a href="#3-为什么搭建自己博客" class="headerlink" title="3.为什么搭建自己博客"></a>3.为什么搭建自己博客</h3><p>当下有很多可以写文章的网站，比如豆瓣、知乎、简书等, 但是假如有利益冲突，被人家举报，就算你花了很多时间来写东西，你写的东西依然可能被屏蔽。所以基于此最安心的方法是搭建一个自己的博客，自由自在。并且HEXO是用Markdown渲染的，意味着，写作如丝般顺滑。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://www.zhihu.com/question/51588481<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://zhuanlan.zhihu.com/p/26625249<a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">https://hexo.io/themes/<a href="#fnref:3" rev="footnote"> ↩</a></span></li></ol></div></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;1-什么是HEXO&quot;&gt;&lt;a href=&quot;#1-什么是HEXO&quot; c
      
    
    </summary>
    
    
      <category term="Markdown" scheme="https://liangchen3519.github.io/categories/Markdown/"/>
    
    
      <category term="HEXO" scheme="https://liangchen3519.github.io/tags/HEXO/"/>
    
      <category term="Matery" scheme="https://liangchen3519.github.io/tags/Matery/"/>
    
      <category term="博客" scheme="https://liangchen3519.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
